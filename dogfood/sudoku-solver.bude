# This is a sudoku solver using the backtracking algorithm in Bude.

# The puzzle to be solved is inputted directly into the Bude source -- for simplicity and because
# Bude doesn't have a way to read user input (aside from calling an external function to do so).

# The algorithm itself is rather simple and is the basic backtracking algorithm for solving sudoku puzzles.
# The puzzle grid is represented as a flat (1 dimensional) array of integers in the range 1--9, with 0
# representing an empty cell. The array is scanned from top left to bottom right* until the first empty cell
# is found. Then, each digit 1--9 is tested for that cell. If a digit is valid and leads to a solution, we
# know that it is the ONLY solution (otherwise, it's not a well-formed sudoku puzzle), so we return true.
# Otherwise, we keep testing digits until they run out. If we test all digits with no successes, the puzzle
# is not solvable, so we return false and backtrack to try the next digit one level up, etc.

# *we actually pass a starting index to the solve function. Only cells from this index onwards are considered.
# In the recursive calls, we pass the current index here, since we know that every index up to this point must
# be non-emty (otherwise the current index wouldn't be that of the first empty cell).

# grid i get-row -> grid row : Get the `i`-th row of `grid`.
func array[81 int] int get-row -> array[81 int] array[9 int] def
    # offset = row_index * 9
    # box_index = offset + (0 <= i < 9)
    9 *
    swap
    var row -> array[9 int] end
    0 0 0   0 0 0   0 0 0 array[9 int] <- row
    for i to 9 do
        [over i +]
        row swap <- [i]
        <- row
    end
    swap pop
    row
end

# grid i get-column -> grid column : Get the `i`-th column of `grid`.
func array[81 int] int get-column -> array[81 int] array[9 int] def
    # offset = column_index
    # box_index = offset + 9 * (0 <= i < 9)
    swap
    var column -> array[9 int] end
    0 0 0   0 0 0   0 0 0 array[9 int] <- column
    for i to 9 do
        [over i 9 * +]
        column swap <- [i]
        <- column
    end
    swap pop
    column
end

# grid i get-square -> grid square : Get the `i`-th square of `grid`.
func array[81 int] int get-square -> array[81 int] array[9 int] def
    # offset: 0 -> 0, 1 -> 3, 2 -> 6, 3 -> 27, 4 -> 30, 5 -> 33, 6 -> 54, 7 -> 57, 8 -> 60
    # offset = ((square_index // 3) * 9 + (square_index % 3)) * 3
    3 divmod
    swap 9 * + 3 *
    swap
    var square -> array[9 int] end
    0 0 0   0 0 0   0 0 0 array[9 int] <- square
    for i to 3 do
        for j to 3 do
            [over i 9 * + j +]
            square swap <- [i 3 * j +]
            <- square
        end
    end
    swap pop
    square
end

# part value test-in -> ?in-part : Check if `value` is in `part` (row, column or square).
func array[9 int] int test-in -> bool def
    var value -> int end
    <- value
    for i to 9 do
        if [i] value = then
            pop
            true ret
        end
    end
    pop
    false ret
end

# i get-index-triple -> r c s :
# Get the row, column and square indices containing grid index `i`.
func int get-index-triple -> int int int def
    # Return (row, column, square)
    var row    -> int
        column -> int
    end
    9 divmod
    <- column
    <- row
    row column  # Save for return.
    # Square index:
    row 3 / 3 *  # Start offset; either 0, 3 or 6.
    column 3 /
    +
end

# grid i value test-any -> grid ?in-any :
# Check if `value` is in either the row, column or square centred on index `i` of `grid`.
func array[81 int] int int test-any -> array[81 int] bool def
    var value -> int
        row    -> int
        column -> int
        square -> int
    end
    <- value
    get-index-triple
    <- square
    <- column
    <- row
    if row    get-row    value test-in then true ret end
    if column get-column value test-in then true ret end
    if square get-square value test-in then true ret end
    false  # Not in row, column or square.
end

# grid i find-next-empty -> grid i' :
# Find the index of the next empty cell (value = 0) in `grid`, starting at index `i`.
func array[81 int] int find-next-empty -> array[81 int] int def
    swap
    for i to over ~ 81 + do
        if [over i +] 0 = then
            # Found.
            swap i + ret
        end
    end
    # Not found.
    swap pop
    -1 ret
end

# grid print-puzzle -> grid : Print `grid` formatted as a 9x9 grid.
func array[81 int] print-puzzle -> array[81 int] def
    for i to 9 do
        i get-row
        for j to 9 do
            [j] printsp
        end
        pop
        "\n" print
    end
end

# row print-row -> row : Print `row` formatted as a 1x9 row.
func array[9 int] print-row -> array[9 int] def
    for i to 9 do
        [i] printsp
    end
    "\n" print
end

# column print-column -> column : Print `column` formatted as a 9x1 column.
func array[9 int] print-column -> array[9 int] def
    for i to 9 do
        [i] println
    end
end

# square print-square -> square : Print `square` formatted as a 3x3 square.
func array[9 int] print-square -> array[9 int] def
    for i to 3 do
        for j to 3 do
            [i 3 * j +] printsp
        end
        "\n" print
    end
end

# grid i solve -> grid' ?solved :
# Try to solve `grid` starting from index `i` and return (possibly) solved grid and success value.
# If no solution was found, the grid is returned unmodified.
func array[81 int] int solve -> array[81 int] bool def
    var i -> int end
    find-next-empty <- i
    # Already solved.
    if i 0 < then true ret end
    for j to 9 do
        if i j 1 + test-any not then
            # Try j+1.
            j 1 + <- [i]
            # Recursion is magic (not really).
            if i solve then true ret end
        end
    end
    # No digit 1-9 worked, so we need to backtrack.
    0 <- [i]  # Reset back to zero.
    false
end

# Puzzle input; change as required:
# (this puzzle from https://en.wikipedia.org/wiki/Sudoku )
# Use 0 for blank space.
5 3 0   0 7 0   0 0 0
6 0 0   1 9 5   0 0 0
0 9 8   0 0 0   0 6 0

8 0 0   0 6 0   0 0 3
4 0 0   8 0 3   0 0 1
7 0 0   0 2 0   0 0 6

0 6 0   0 0 0   2 8 0
0 0 0   4 1 9   0 0 5
0 0 0   0 8 0   0 7 9
array[81 int]

0 solve

if then
    "Solved!" println
else
    "Failed to solve..." println
end

print-puzzle

pop
