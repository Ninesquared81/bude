comp window def
    a -> int
    b -> int
    c -> int
end

func window window-to-base10 -> int def
    decomp
    rot 100 *
    rot 10 *
    + +
end

func window next-cell -> int def
    window-to-base10
    if   dupe 111 = then 0
    elif dupe 110 = then 1
    elif dupe 101 = then 1
    elif dupe 100 = then 0
    elif dupe 011 = then 1
    elif dupe 010 = then 1
    elif dupe 001 = then 1
    elif dupe 000 = then 0
    else "Invalid window\n" print exit  # Use cell contents as (non-zero) exit code.
    end
    swap pop
end

func array[14 int] next-generation -> array[14 int] def
    0 0 0 window
    swap [13] rot swap <- a
    swap [0]  rot swap <- b
    swap [1]  rot swap <- c
    for i to 12 do
        dupe next-cell
        rot swap <- [i]
        [i 2 +] rot
        decomp rot pop rot window
    end
    dupe next-cell
    rot swap <- [12]
    [0] rot
    decomp rot pop rot window
    next-cell <- [13]
end

func int display-cell def
    if dupe 1 = then
        '*' print
    elif dupe 0 = then
        ' ' print
    else
        "Invalid cell: " print
        print
        1 exit
    end
    pop
end

func array[14 int] display-r110 def
    for i to 14 do
        [i] display-cell
    end
    '\n' print
    pop
end

func main def
    0 0 0 1 0 0 1 1 0 1 1 1 1 1
    array[14 int]
    for 20 do
        dupe display-r110
        next-generation
    end
    pop
end

main
