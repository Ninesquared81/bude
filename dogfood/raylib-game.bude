### BEGIN RAYLIB ###

# Data type definitions
pack Color def
    r -> u8
    g -> u8
    b -> u8
    a -> u8
end

pack Vector2 def
    x -> f32
    y -> f32
end

comp Vector3 def
    xy -> Vector2
    z -> f32
end

comp Rectangle def
    Rec.pos -> Vector2
    Rec.size -> Vector2
end

# Colours
func RAYWHITE -> Color def 245u8 245u8 245u8 255u8 Color end
func RED      -> Color def 230u8 41u8 55u8 255u8 Color end

# Keys
func KEY_RIGHT -> s32 def 262s32 end
func KEY_LEFT  -> s32 def 263s32 end
func KEY_DOWN  -> s32 def 264s32 end
func KEY_UP    -> s32 def 265s32 end

# Raylib functions
import raylib def
    func s32 s32 ptr InitWindow end
    func CloseWindow end
    func WindowShouldClose -> bool end
    func BeginDrawing end
    func EndDrawing end
    func Color ClearBackground end
    func ptr s32 s32 s32 Color DrawText end
    func ptr s32 MeasureText -> s32 end
    func Vector2 f32 Color DrawCircleV end
    func Vector2 Vector2 Color DrawRectangleV end
    func Vector2 Vector2 Vector2 Color DrawTriangle end
    func Vector2 s32 f32 f32 Color DrawPoly end
    func s32 IsKeyPressed -> bool end
    func s32 IsKeyDown -> bool end
    func Color ColorToHSV -> Vector3 end
    func f32 f32 f32 ColorFromHSV -> Color end
end

### END RAYLIB ###


func string to-cstr -> ptr def
     decomp pop
end

comp Player def
    pos -> Vector2
    colour -> Color
    speed -> f32
end

comp Triangle def
    v1 -> Vector2
    v2 -> Vector2
    v3 -> Vector2
end

func Player get-body -> Rectangle def
    # pos is in centre of body
    pos
    var player-width -> f32
        player-height -> f32
    end
    40f32 <- player-width
    80f32 <- player-height
    x player-width 0.5f32 * - <- x
    y player-height 0.5f32 * - <- y
    player-width player-height Vector2
    Rectangle
    swap pop
end

func Player get-nose-cone -> Triangle def
    get-body decomp over  # top corner of body
    # corner1 size corner2
    x rot x rot +
    rot swap <- x
    # corner1 corner2 corner2 size (c.x-s.x/2)
    swap over
    x rot x 0.5f32 * rot swap -
    # corner1 corner2 (c.x-s.x/2) corner2 (c.y+s.x)
    swap unpack pop
    rot y rot - <- y
    swap <- x
    Triangle
end

# func Player get-left-fin -> Triangle def
# end

# func Player get-right-fin -> Triangle def
# end

func Vector3 print-hsv def
    decomp swap unpack swap
    "h: " print print
    "s: " print print
    "v: " print print
    "\n" print
end

func Color next-colour -> Color def
    ColorToHSV
    # dupe print-hsv
    decomp swap unpack  # v h s
    swap 157f32 +  # v s (h+15)
    if dupe 360f32 > then
        360f32 -
    end
    swap rot  # h s v
    ColorFromHSV
end

func Player draw-player def
    # dupe
    # pos swap
    # 50f32 swap
    # colour swap pop
    # DrawCircleV
    # pos swap
    # 3s32 swap
    # 50f32 swap
    # 15f32 swap
    # colour next-colour swap pop
    # DrawPoly
    # pos 50f32 80f32 Vector2 Rectangle
    # over colour swap pop
    # swap decomp rot DrawRectangleV
    # pos 10f32 rot colour swap pop
    # DrawCircleV
    var player-colour -> Color end
    colour <- player-colour
    dupe get-body decomp player-colour DrawRectangleV
    get-nose-cone decomp
    # "3" to-cstr swap unpack to s32 swap to s32 swap 5s32 player-colour DrawText
    # "2" to-cstr swap unpack to s32 swap to s32 swap 5s32 player-colour DrawText
    # "1" to-cstr swap unpack to s32 swap to s32 swap 5s32 player-colour DrawText
    player-colour DrawTriangle
end

func Player move-right -> Player def
    var player-speed -> f32 end
    speed <- player-speed
    pos x player-speed + <- x <- pos
end

func Player move-left -> Player def
    var player-speed -> f32 end
    speed <- player-speed
    pos x player-speed - <- x <- pos
end

func Player move-down -> Player def
    var player-speed -> f32 end
    speed <- player-speed
    pos y player-speed + <- y <- pos
end

func Player move-up -> Player def
    var player-speed -> f32 end
    speed <- player-speed
    pos y player-speed - <- y <- pos
end

var screen-width  -> s32
    screen-height -> s32
    screen-title  -> string
    screen-centre -> Vector2  # temporary patch
end

# func screen-centre -> Vector2 def
#     screen-width 0.5f32 *
#     screen-height 0.5f32 *
#     Vector2
# end


1200s32 <- screen-width
800s32  <- screen-height

"Raylib Game in Bude" <- screen-title

screen-width .5f32 *
screen-height .5f32 *
Vector2 <- screen-centre

screen-width screen-height screen-title to-cstr InitWindow

var player -> Player end
screen-centre RED .2f32 Player <- player

func should-go-right -> bool def
    'D' to s32 IsKeyDown
    KEY_RIGHT IsKeyDown
    or
end

func should-go-left -> bool def
    'A' to s32 IsKeyDown
    KEY_LEFT IsKeyDown
    or
end

func should-go-down -> bool def
    'S' to s32 IsKeyDown
    KEY_DOWN IsKeyDown
    or
end

func should-go-up -> bool def
    'W' to s32 IsKeyDown
    KEY_UP IsKeyDown
    or
end

while WindowShouldClose not do
    BeginDrawing
    RAYWHITE ClearBackground

    var text -> ptr
        font-size -> s32
    end
    "Hello, Raylib!" to-cstr <- text
    80s32 <- font-size

    # text
    # screen-width text font-size MeasureText - 2s32 /  # x position
    # screen-height 2s32 /  # y position
    # font-size
    # RED
    # DrawText

    player draw-player

    if should-go-right then
        player move-right <- player
    end
    if should-go-left then
        player move-left <- player
    end
    if should-go-up then
        player move-up <- player
    end
    if should-go-down then
        player move-down <- player
    end
    if ' ' to s32 IsKeyPressed then
        player colour next-colour <- colour <- player
    end


    EndDrawing
end

CloseWindow
